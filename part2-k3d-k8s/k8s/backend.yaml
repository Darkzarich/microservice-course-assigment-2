apiVersion: v1
kind: Service
metadata:
  name: backend
  namespace: highload-dns
spec:
  selector:
    app: backend
  ports:
    - name: http
      port: 8000
      targetPort: 8000
  type: ClusterIP
---
# Using headless Service (clusterIP: None) Kubernetes DNS returns multiple IP addresses: the direct IPs of all Pods matched by the Service
# The normal service above has type: ClusterIP, so the magic of Kubernetes (kube-proxy) then intercepts traffic to this IP and uses its own internal load-balancing rules
# (typically iptables or IPVS) to forward the request to one of the healthy backend pods.
apiVersion: v1
kind: Service
metadata:
  name: backend-headless
  namespace: highload-dns
spec:
  clusterIP: None
  selector:
    app: backend
  ports:
    - name: http
      port: 8000
      targetPort: 8000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: highload-dns
spec:
  replicas: 2
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
        - name: app
          image: k3d-registry.localhost:5000/backend:local
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8000
          env:
            - name: DB_HOST
              value: haproxy.highload-dns.svc.cluster.local
            - name: DB_PORT
              value: '5432'
            - name: DB_USER
              value: app
            - name: DB_PASSWORD
              value: app
            - name: DB_NAME
              value: appdb
          readinessProbe:
            httpGet:
              path: /health
              port: 8000
            initialDelaySeconds: 3
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: /health
              port: 8000
            initialDelaySeconds: 10
            periodSeconds: 10
